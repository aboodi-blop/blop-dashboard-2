rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user has admin role
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admins can read all user profiles
    }
    
    // Income collection - users can only access their own income
    match /income/{incomeId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // Expenses collection - users can only access their own expenses
    match /expenses/{expenseId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // Investors collection - users can only access their own investors
    match /investors/{investorId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}